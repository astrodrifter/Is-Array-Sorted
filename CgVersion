using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CheggIsArraySorted {
    class Program {
        static void Main(string[] args) {
            int[] sortedInts = new int[] { 1, 3, 6, 7, 8 };
            int[] unsortedInts = new int[] { 8, 7, 6, 2 };

            /*   int[]unsortedInts = new int[]{8,2,3,4,6 };

                  int[]unsortedInts = new int[]{ 1, 5, 4, 6, 2}  */

            Console.WriteLine(SortTools.IsSorted(sortedInts));                // True
            Console.WriteLine(SortTools.IsSortedDescending(sortedInts));      // False
            Console.WriteLine(SortTools.IsSorted(unsortedInts));              // False
            Console.WriteLine(SortTools.IsSortedDescending(unsortedInts));    // False
            Console.WriteLine(SortTools.IsSortedDescending(unsortedInts));    // False
            Console.ReadKey();
        }
    }

    public static class SortTools {
        public static bool IsSorted(int[] array) {
            for (int j = 1; j < array.Length; j++) {
                if (array[j - 1] > array[j]) {
                    return false;
                }
            }
            return true;
        }

        public static bool IsSorted(string[] array) {
            for (int j = 1; j < array.Length; j++) {
                if (array[j - 1].CompareTo(array[j]) > 0) {
                    return false;
                }
            }
            return true;
        }

        public static bool IsSortedDescending(int[] array) {
            for (int j = array.Length - 2; j >= 0; j--) {
                if (array[j] < array[j + 1]) {
                    return false;
                }
            }
            return true;
        }

        public static bool IsSortedDescending(string[] array) {
            for (int j = array.Length - 2; j >= 0; j--) {
                if (array[j].CompareTo(array[j + 1]) < 0) // If previous is smaller, return false
                {
                    return false;
                }
            }

            return true;

        }
    }
}

